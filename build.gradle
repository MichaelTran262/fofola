plugins {
    id 'java'
    id 'com.bmuschko.docker-remote-api'
    id 'io.spring.dependency-management'
}

group = appGroup
version = appVersion

clean.doFirst {
    delete(project.file('docker/build'))
    delete(project.file('outputs'))
}

/********************* DOCKER BUILD ***********************/

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer

task createDockerfile(type: Dockerfile) {
    dependsOn ':backend:bootJar'
    destFile.set(project.file('build/Dockerfile'))
    from('adoptopenjdk/openjdk14:alpine-jre')
    label(['maintainer': 'Aleksei Ermak "aleksei.ermak@gmail.com"'])
    copyFile(jarName, '/app/fofola.jar')
    entryPoint('java')
    exposePort(8081)
    defaultCommand('-Xmx2g', '-jar', '/app/fofola.jar')
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = project.file('build')
    images.add(dockerImageName + ':' + appVersion)
}

task buildLatest(type: DockerTagImage) {
    dependsOn buildImage
    imageId = buildImage.getImageId()
    repository = dockerRepository
    tag = 'latest'
}

task pushImage(type: DockerPushImage) {
    dependsOn buildLatest
    images = [dockerImageName + ':' + appVersion, dockerImageName + ':latest']
}

task createDBContainer(type: DockerCreateContainer) {
    targetImageId 'postgres:11.5'
    containerName = 'fofola-postgres'
    hostConfig.autoRemove = true
}

task createFofolaContainer(type: DockerCreateContainer) {
    dependsOn buildLatest
    containerName = 'fofola'
    targetImageId buildLatest.getImageId()
    hostConfig.portBindings = ['8081:8081']
    hostConfig.autoRemove = true
    tty = true
}

task startDBContainer(type: DockerStartContainer) {
    dependsOn createDBContainer
    targetContainerId createDBContainer.getContainerId()
}

task startFofolaContainer(type: DockerStartContainer) {
    dependsOn startDBContainer, createFofolaContainer
    targetContainerId createFofolaContainer.getContainerId()
}

task stopDBContainer(type: DockerStopContainer) {
    targetContainerId createDBContainer.getContainerId()
}

task stopFofolaContainer(type: DockerStopContainer) {
    dependsOn stopDBContainer
    targetContainerId createFofolaContainer.getContainerId()
}

task dockerFunctionalTestFofola(type: Test) {
    dependsOn startFofolaContainer
    finalizedBy stopFofolaContainer
}
